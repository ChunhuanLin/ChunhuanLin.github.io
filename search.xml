<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[hexo]]></title>
      <url>/notes/hexo/</url>
      <content type="html"><![CDATA[<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><ul>
<li><p>安装npm  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo add-apt-repository ppa:chris-lea/node.js  </div><div class="line">sudo apt-get update  </div><div class="line">sudo apt-get install npm</div></pre></td></tr></table></figure>
</li>
<li><p>安装node.js<br>首先，在<a href="https://nodejs.org/en/" target="_blank" rel="external">官网</a>下载node.js的安装文件<br>然后将可执行文件复制到<code>/usr/bin</code>下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo ln -s ~/Libraries/node-v6.11.0-linux-x64/bin/node /usr/bin/node</div></pre></td></tr></table></figure>
<blockquote>
<p>也可以将 <code>npm</code> 放到 <code>usr/bin</code> 下面，但是我已经装过了，就没有这么做<br>使用默认的node-v4.2.0版本，material的1.4版本会出错</p>
</blockquote>
</li>
<li><p>根据官方的github主页配置<br><a href="https://github.com/hexojs/hexo" target="_blank" rel="external">https://github.com/hexojs/hexo</a>  </p>
</li>
</ul>
<h2 id="使用的主题"><a href="#使用的主题" class="headerlink" title="使用的主题"></a>使用的主题</h2><p>  <a href="https://github.com/viosey/hexo-theme-material" target="_blank" rel="external">https://github.com/viosey/hexo-theme-material</a><br>  配置站点文件<code>_config.yml</code>的language，设为zh-CN，否则会报错  </p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><blockquote>
<p>参考链接： <a href="https://hexo.io/docs/" target="_blank" rel="external">https://hexo.io/docs/</a>  </p>
</blockquote>
<h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><ul>
<li><p>创建一个post或者page  </p>
<p>创建的命令为：<code>$ hexo new [layout] &lt;title&gt;</code>  </p>
<ul>
<li>layout<br>有三种：<code>post</code>、<code>page</code>和<code>draft</code>，生成的路径分别为：<code>source/_posts</code>、<code>source</code>和<code>source/_drafts</code>   </li>
<li>生成的文件的名字<br>文件名的默认设置在<code>_config.md</code>文件中可以设置，这里我设置默认生成的文件名为<code>title.md</code>  </li>
<li>draft<br>draft是不会被显示到网页上的，可以使用：<br><code>$ hexo publish [layout] &lt;title&gt;</code><br>来讲<code>draft</code>移动到<code>source/_posts</code>下，使其成为<code>post</code>  </li>
</ul>
</li>
<li>Front-matter<br>Front-matter是在YAML文件或者JSON文件头部，用来描述书写设置的东西。YAML以<code>---</code>结束，而JSON以<code>;;;</code>结束  <ul>
<li>可以设置的参数：  </li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:left">Setting</th>
<th style="text-align:left">Description</th>
<th style="text-align:left">Default</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">layout</td>
<td style="text-align:left">Layout</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">title</td>
<td style="text-align:left">Title</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">date</td>
<td style="text-align:left">Published dat</td>
<td style="text-align:left">File created date</td>
</tr>
<tr>
<td style="text-align:left">updated</td>
<td style="text-align:left">Updated date</td>
<td style="text-align:left">File updated date</td>
</tr>
<tr>
<td style="text-align:left">comments</td>
<td style="text-align:left">Enables comment feature for the post</td>
<td style="text-align:left">true</td>
</tr>
<tr>
<td style="text-align:left">tags</td>
<td style="text-align:left">Tags (Not available for pages)</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">categories</td>
<td style="text-align:left">Categories (Not available for pages)</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">permalink</td>
<td style="text-align:left">Overrides the default permalink of the post</td>
</tr>
</tbody>
</table>
<ul>
<li>Categories &amp; Tags<br><code>categories</code>是按一定顺序组织的，因此书写时要按一定顺序，而<code>tags</code>则无顺序要求，书写方式如下：  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">categories:</div><div class="line">- Sports</div><div class="line">- Baseball</div><div class="line">tags:</div><div class="line">- Injury</div><div class="line">- Fight</div><div class="line">- Shocking</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>标签插件（Tag Plugins）的语法  </p>
<blockquote>
<p>原文链接：<a href="https://hexo.io/docs/tag-plugins.html" target="_blank" rel="external">https://hexo.io/docs/tag-plugins.html</a>     </p>
</blockquote>
<ul>
<li><p>引用（Block Quote）<br>形如：  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;% blockquote [author[, source]] [link] [source_link_title] %&#125;  </div><div class="line">content  </div><div class="line">&#123;% endblockquote %&#125;</div></pre></td></tr></table></figure>
<p>例如引用网页链接：  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;% blockquote Seth Godin http://sethgodin.typepad.com/seths_blog/2009/07/welcome-to-island-marketing.html Welcome to Island Marketing %&#125;  </div><div class="line">Every interaction is both precious and an opportunity to delight.  </div><div class="line">&#123;% endblockquote %&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>代码块<br>形如：  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;% codeblock [title] [lang:language] [url] [link text] %&#125;  </div><div class="line">code snippet  </div><div class="line">&#123;% endcodeblock %&#125;</div></pre></td></tr></table></figure>
<p>例如使用objc语言：  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;% codeblock lang:objc %&#125;  </div><div class="line">[rectangle setX: 10 y: 10 width: 20 height: 20];  </div><div class="line">&#123;% endcodeblock %&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>加入其他post的链接  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&#123;% post_path slug %&#125;  </div><div class="line">&#123;% post_link slug [title] %&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>插入固定大小的图片  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;% img [class names] /path/to/image [width] [height] [title text [alt text]] %&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>插入YouTube视频  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;% youtube video_id %&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>更多其他功能请看<a href="https://hexo.io/docs/tag-plugins.html" target="_blank" rel="external">原文链接</a>  </p>
</li>
</ul>
</li>
<li><p>Asset Floders  </p>
<ul>
<li>Global Asset Folder<br>Assets指<code>source</code>文件夹里的非post文件，比如图片，CSS，JavaScript等等。 比如获得图片使用这种方式就可以：<br><code>![](/images/image.jpg)</code>  </li>
<li>Post Asset Folder<br>在<code>_config.yml</code>文件中，做如下修改：<br><code>post_asset_folder: true</code><br>那么在你使用<code>hexo new [layout] &lt;title&gt;</code>生成一个新的post的时候，那么会生成跟这个post同名的一个Asset，用来存储他相关的文件。  </li>
<li>使用markdown格式的相对路径会无法在网页上显示，因此要使用Tag Plugin的语法  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;% asset_path slug %&#125;  </div><div class="line">&#123;% asset_img slug [title] %&#125;  </div><div class="line">&#123;% asset_link slug [title] %&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>Server  </p>
<ul>
<li><p>指定启动服务器ip和端口  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo server -i 192.168.1.1  </div><div class="line">hexo server -p 5000</div></pre></td></tr></table></figure>
</li>
<li><p>静态模式<br>通常，直接使用server查看的并不是生成后的静态网页，生成静态网页首先要使用<code>genrate</code>，要查看静态网页要加上<code>-s</code>参数：<br><code>hexo server -s</code>  </p>
</li>
</ul>
</li>
<li><p>生成页面<br><code>hexo generate --watch</code> 只将有修改的文件进行重新生成  </p>
<p>生成后配置，下面两条命令是等价的：  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ hexo generate --deploy  </div><div class="line">$ hexo deploy --generate</div></pre></td></tr></table></figure>
</li>
<li><p>配置<br><code>hexo deploy</code> 将站点配置到远程服务器  </p>
</li>
</ul>
<h3 id="个性化"><a href="#个性化" class="headerlink" title="个性化"></a>个性化</h3><ul>
<li>Permalinks<br>可以使用这些变量对<code>_config.yml</code>进行设置  </li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:left">Variable</th>
<th style="text-align:left">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>:year</code></td>
<td style="text-align:left">Published year of posts (4-digit)</td>
</tr>
<tr>
<td style="text-align:left"><code>:month</code></td>
<td style="text-align:left">Published month of posts (2-digit)</td>
</tr>
<tr>
<td style="text-align:left"><code>:i_month</code></td>
<td style="text-align:left">Published month of posts (Without leading zeros)</td>
</tr>
<tr>
<td style="text-align:left"><code>:day</code></td>
<td style="text-align:left">Published day of posts (2-digit)</td>
</tr>
<tr>
<td style="text-align:left"><code>:i_day</code></td>
<td style="text-align:left">Published day of posts (Without leading zeros)</td>
</tr>
<tr>
<td style="text-align:left"><code>:title</code></td>
<td style="text-align:left">Filename</td>
</tr>
<tr>
<td style="text-align:left"><code>:id</code></td>
<td style="text-align:left">Post ID</td>
</tr>
<tr>
<td style="text-align:left"><code>:category</code></td>
<td style="text-align:left">Categories. If the post is uncategorized, it will use the default_category value.</td>
</tr>
</tbody>
</table>
<p>  修改<code>_config.yml</code>文件中的<code>deploy</code>项，hexo也可以同时进行多个部署：<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">- type: git</div><div class="line">  repo:</div><div class="line">- type: heroku</div><div class="line">  repo:</div></pre></td></tr></table></figure></p>
<ul>
<li>Git<br><code>$ npm install hexo-deployer-git --save</code><br>编辑设置：  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">type: git  </div><div class="line">repo: &lt;repository url&gt;  </div><div class="line">branch: [branch]  </div><div class="line">message: [message]</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>主题<br>官方主题库： <a href="https://hexo.io/themes/" target="_blank" rel="external">https://hexo.io/themes/</a>  </p>
</li>
<li><p>变量<br>可以在<a href="https://hexo.io/docs/variables.html" target="_blank" rel="external">这个页面</a>看到所有变量。  </p>
</li>
</ul>
<h3 id="Material的使用"><a href="#Material的使用" class="headerlink" title="Material的使用"></a>Material的使用</h3><blockquote>
<p>参考链接： <a href="https://material.viosey.com/" target="_blank" rel="external">https://material.viosey.com/</a>  </p>
</blockquote>
<h2 id="Debug"><a href="#Debug" class="headerlink" title="Debug"></a>Debug</h2><ul>
<li>由于不明原因，默认启动的iP若使用<code>localhost</code>则打不开，而使用<code>127.0.0.1</code>却能打开。因此修改这个文件<code>/node_modules/hexo-server/lib/server.js</code>,将其中配置ip的那行改为：<br><code>var ip = args.i || args.ip || &#39;127.0.0.1&#39; || config.server.ip;</code></li>
</ul>
]]></content>
      
        <categories>
            
            <category> notes </category>
            
        </categories>
        
        
        <tags>
            
            <tag> notes </tag>
            
            <tag> guide </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Anaconda]]></title>
      <url>/notes/anaconda/</url>
      <content type="html"><![CDATA[<h2 id="配置路径"><a href="#配置路径" class="headerlink" title="配置路径"></a>配置路径</h2><p>安装完anaconda后，numpy出错，原因不明，这时将anaconda安装路径下的./lib/python2.7/site-package/ 路径放到python路径的首选项中，解决问题  </p>
]]></content>
      
        <categories>
            
            <category> notes </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux </tag>
            
            <tag> tools </tag>
            
            <tag> python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Github]]></title>
      <url>/notes/github/</url>
      <content type="html"><![CDATA[<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git config --global user.name &quot;Your Name&quot;</div><div class="line">$ git config --global user.email &quot;email@example.com&quot;</div></pre></td></tr></table></figure>
<h2 id="添加文件"><a href="#添加文件" class="headerlink" title="添加文件"></a>添加文件</h2><p><code>git add filename</code> 把修改过的文件添加到git管理仓库，就可以对这个文件进行管理啦，但还不是提交<br><code>git commit -m &quot;message&quot;</code> 将文件提交给git  </p>
<h2 id="时光机穿梭"><a href="#时光机穿梭" class="headerlink" title="时光机穿梭"></a>时光机穿梭</h2><p><code>git status</code> 查看仓库状态，看到哪些文件被修改了<br><code>git diff filename</code> 查看某个文件上次修改的情况  </p>
<ul>
<li>版本回退  <ul>
<li><code>git log --graph --pretty=oneline</code><br>显示历史提交情况，<code>-- graph</code>显示图形结构，后面的参数表示简化显示结果  </li>
<li><code>git reset --hard HEAD^</code><br>HEAD表示当前版本的哈希码，HEAD^表示上一个版本，HEAD^^表示上上个版本，以此类推<br>也可以用HEAD~100来表示往上100个版本  </li>
<li>从过去再次回到未来<br>回溯之后，<code>git status</code>无法看到“未来”那个版本的<code>commit id</code>了。这时候，如果还能查到他的id，那么就可以使用<code>git reset --hard commit-id</code>回到未来。commit id不用全输，只要输前几位就可以了  </li>
<li><code>git reflog</code><br>历史命令的所有记录。可以通过这个方式来找到上面说的“未来版本”的commit id  </li>
</ul>
</li>
</ul>
<ul>
<li><p>工作区和暂存区  </p>
<ul>
<li>工作区<br>就是电脑里能看到的目录  </li>
<li>版本库<br>就是隐藏目录<code>.git</code><br><img src="./images/git1.jpeg" alt=".git">  <ul>
<li>stage<br>  <code>git add</code>的文件会先存放在stage里面  </li>
<li>分支<br>  首先有一个默认分支<code>master</code>，<code>git commit</code>即将文件添加到分支中  </li>
<li>HEAD<br>  一个指针，指向当前分支    </li>
</ul>
</li>
</ul>
</li>
<li><p>管理修改  </p>
<ul>
<li>git管理的是修改，而不是文件</li>
<li><code>git diff HEAD -- filename</code><br>查看工作区和版本库里面的最新版本的区别  </li>
</ul>
</li>
<li><p>撤销修改  </p>
<ul>
<li><code>git checkout -- filename</code><br>让文件回到最近一次<code>git commit</code>或者<code>git add</code>时的状态，即回到git有记录的最新一次状态，撤销在那之后的在工作区的修改  <blockquote>
<p>checkout的 <strong><em>- -</em></strong> 很重要，没有他就表示切换分支  </p>
</blockquote>
</li>
</ul>
</li>
<li><p>删除文件  </p>
<ul>
<li><p>把文件从版本库里删除  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git rm filename  </div><div class="line">git commit -m &apos;message&apos;</div></pre></td></tr></table></figure>
</li>
<li><p>误删工作区里的文件，从版本库恢复<br>checkout即可  </p>
</li>
</ul>
</li>
</ul>
<h2 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h2><h3 id="添加远程库"><a href="#添加远程库" class="headerlink" title="添加远程库"></a>添加远程库</h3><ul>
<li><p>设置github  </p>
<ol>
<li>创建SSH Key<br>在~/.ssh下看有没有<code>id_rsa</code>和<code>id_rsa.pub</code>这两个文件，前者是私钥，后者是公钥，如果没有则使用下面命令创建：<br><code>$ ssh-keygen -t rsa -C &quot;youremail@example.com&quot;</code>  </li>
<li>将公钥添加到github  </li>
</ol>
</li>
<li><p>添加远程库  </p>
<ul>
<li>配置本地远程库<ol>
<li>在github创建一个与本地仓库名字一致的仓库，记其地址为<code>remote_repo</code>  </li>
<li>本次仓库下执行<code>git remote add origin remote_repo</code>  </li>
</ol>
</li>
<li>将本地仓库所有内容推送到远程库<br><code>git push -u origin master</code><br>这个命令实际上是把当前分支<code>master</code>推送到远程的<code>master</code>分支。第一次推送加上<code>-u</code>参数，以后的提交可以不用<code>-u</code>了  </li>
</ul>
</li>
<li><p>SSH警告<br>第一次使用<code>clone</code>或者<code>push</code>时，会得到一个警告，这是为了验证github服务器的key，输入<code>yes</code>即可  </p>
</li>
</ul>
<h3 id="从远程库克隆"><a href="#从远程库克隆" class="headerlink" title="从远程库克隆"></a>从远程库克隆</h3><ul>
<li><code>git clone remote_repo</code></li>
</ul>
<h2 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h2><h3 id="创建与合并分支"><a href="#创建与合并分支" class="headerlink" title="创建与合并分支"></a>创建与合并分支</h3><ul>
<li><p>创建并切换到分支<br>  <code>git checkout -b dev</code> dev是新建分支的名字  </p>
<blockquote>
<p>上述命令相当于：<br>git branch dev<br>git checkout dev  </p>
</blockquote>
</li>
<li><p>查看当前分支<br>  <code>git branch</code>  </p>
</li>
<li><p>合并分支<br>  <code>git checkout master</code> 将当前分支切到主分支<br>  <code>git merge dev</code> 将dev分支merge到当前分支，即主分支上<br>   <code>git branch -d dev</code> 合并后就可以删掉dev分支了  </p>
</li>
</ul>
<h3 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h3><ul>
<li>产生冲突的情况<br>  当发生下面这种状态时就会产生冲突：<br>  <img src="./images/git2.png" alt="git2.png"></li>
</ul>
<ul>
<li><p>查看冲突<br>  <code>git status</code> 可以看到有哪些文件产生了冲突  </p>
</li>
<li><p>解决冲突<br>  直接查看修改后的文件，它里面会标记不同分支冲突的内容，我们将其修改之后，再提交即可。</p>
</li>
<li>查看冲突解决的情况<br>  <code>git log --graph --pretty=oneline --abbrev-commit</code>  </li>
</ul>
<h3 id="分支管理策略"><a href="#分支管理策略" class="headerlink" title="分支管理策略"></a>分支管理策略</h3><ul>
<li><code>git merge --no-ff -m &#39;message&#39; dev</code><br>  <code>--no-ff</code>：通常，不使用这个参数，Git会使用<code>Fast Forward</code>策略，master会直接指向dev分支，如果删除了这个分支，那么会丢掉分支的信息。而使用这个参数，则会在merge时产生一个新的commit，也因此要<code>-m</code>信息，这样，就可以从分支历史上看到分支信息。因此，通常要使用<code>--no-ff</code>参数  </li>
<li>分支策略<br>  <code>master</code>分支应该是非常稳定的，<strong>仅用来发布新的版本</strong><br>  <code>dev</code>分支是不稳定的，大家都在dev上干活，合并也都在<code>dev</code>上合并<br>  <img src="./images/git3.png" alt="git3.png">  </li>
</ul>
<h3 id="Bug分支"><a href="#Bug分支" class="headerlink" title="Bug分支"></a>Bug分支</h3><p>  經常有這樣的事情發生，當你正在進行專案中某一部分的工作，裡面的東西處於一個比較雜亂的狀態，而你想轉到其他分支上進行一些工作。問題是，你不想只為了待會要回到這個工作點，就把做到一半的工作進行提交。解決這個問題的辦法就是<code>git stash</code>命令。</p>
<ul>
<li><code>git stash</code><br>  暂存当前工作现场，而不用进行提交，这样就可以在保存现在工作之后，切到别的分支以处理bug或做其他工作  </li>
<li><code>git stash list</code><br>  切回原来的工作分支后，可以使用这个命令查看储藏了哪些工作现场<br>  ‘’’<br>  $ git stash list<br>  stash@{0}: WIP on dev: 6224937 add merge<br>  ‘’’</li>
<li><code>git stash pop</code><br>  恢复并删除stash  <blockquote>
<p>pop实际上是执行了这两步:<br>git slash apply stash@{0} 将stash恢复到工作现场<br>git stash drop 删除stash  </p>
</blockquote>
</li>
</ul>
<h3 id="Feature分支"><a href="#Feature分支" class="headerlink" title="Feature分支"></a>Feature分支</h3><p>  添加新功能时就新建一个feature分支，在上面开发，避免搞乱主分支（dev分支）<br>  假设此时feature分支需要销毁（老板说，不要这个功能了），而他还没有merge到dev分支，这时，由于还没有merge，因此不能用<code>-d</code>参数进行销毁，而要使用<code>-D</code>参数进行强制销毁：<br>  <code>git branch -D feature</code>  </p>
<h3 id="多人协作"><a href="#多人协作" class="headerlink" title="多人协作"></a>多人协作</h3><h4 id="添加合作者"><a href="#添加合作者" class="headerlink" title="添加合作者"></a>添加合作者</h4><ol>
<li>新建一个Repository</li>
<li>进入Repository的Settings</li>
<li>在Collaborators里就可以添加合作者了</li>
<li>将生成的地址发给你的合作者，合作者选择是否同意</li>
<li>接下来就可以愉快的合作开发了</li>
</ol>
<h4 id="进行多人协作"><a href="#进行多人协作" class="headerlink" title="进行多人协作"></a>进行多人协作</h4><p>  当你从远程仓库克隆时，实际上Git自动把本地的<code>master</code>分支和远程的<code>master</code>分支对应起来了，并且，远程仓库的默认名称是<code>origin</code>。</p>
<ul>
<li><p><code>git remote -v</code><br>查看远程库信息，将会显示可以<code>fetch</code>或者<code>push</code>的<code>origin</code>地址，如果没有推送权限，就抓不到<code>push</code>地址  </p>
</li>
<li><p>推送分支<br><code>git push origin &lt;branch&gt;</code> 将分支推送到远程<br>然而，并不是所有分支都需要推送，一般来说只有需要与别人合作的分支才有必要推送到远程，如<code>master</code>分支、<code>dev</code>分支，但如果是修复小bug的分支则无必要  </p>
</li>
<li><p>抓取分支<br><code>clone</code>只能得到主分支，要抓取别的分支，要先clone，再使用以下命令：<br><code>git checkout -b dev origin/dev</code><br>然后就可以对这个分支进行操作啦，还可以时不时地<code>push</code>到远程   </p>
</li>
<li><p>冲突解决<br>你的小伙伴已经向origin/dev分支推送了他的提交，而碰巧你也对同样的文件作了修改，并试图推送，那么就会出现冲突<br><strong>解决办法</strong><br>抓取远程<code>origin/dev</code>最新的提交，然后在本地处理好冲突再推送到远程，步骤如下：  </p>
<ol>
<li>指定本地<code>dev</code>分支与远程<code>origin/dev</code>分支的链接，根据提示，设置<code>dev</code>和<code>origin/dev</code>的链接：<br><code>git branch --set-upstream dev origin/dev</code>  </li>
<li>pull<br><code>git pull</code>  </li>
<li>解决冲突<br>与本地解决冲突的方法一样，解决完后，再提交</li>
<li>push到远程<br><code>git push origin dev</code>  </li>
</ol>
</li>
</ul>
<h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><ul>
<li><code>git tag &lt;name&gt;</code>用于新建一个标签，默认为<code>HEAD</code>，也可以指定一个commit id  </li>
<li><code>git tag -a &lt;tagname&gt; -m &quot;blablabla...&quot;</code> 可以指定标签信息  </li>
<li><code>git tag -s &lt;tagname&gt; -m &quot;blablabla...&quot;</code>可以用PGP签名标签  </li>
<li><code>git tag</code>可以查看所有标签   </li>
<li><code>git push origin &lt;tagname&gt;</code> 可以推送一个本地标签；</li>
<li><code>git push origin --tags</code> 可以推送全部未推送过的本地标签；</li>
<li><code>git tag -d &lt;tagname&gt;</code> 可以删除一个本地标签；</li>
<li><code>git push origin :refs/tags/&lt;tagname&gt;</code> 可以删除一个远程标签。</li>
</ul>
]]></content>
      
        <categories>
            
            <category> notes </category>
            
        </categories>
        
        
        <tags>
            
            <tag> tools </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[vim]]></title>
      <url>/Linux/vim/</url>
      <content type="html"><![CDATA[<h2 id="配置文件的位置"><a href="#配置文件的位置" class="headerlink" title="配置文件的位置"></a>配置文件的位置</h2><p>   终端中输入<code>vim</code><br>   命令模式输入<code>:echo $VIM</code>  </p>
<h2 id="vim安装markdown插件"><a href="#vim安装markdown插件" class="headerlink" title="vim安装markdown插件"></a>vim安装markdown插件</h2><p>   参考链接： <a href="http://www.jianshu.com/p/44d31327f953" target="_blank" rel="external">http://www.jianshu.com/p/44d31327f953</a><br>   项目链接： <a href="https://github.com/suan/vim-instant-markdown" target="_blank" rel="external">https://github.com/suan/vim-instant-markdown</a><br>   安装了vim-instant-markdown插件,输入下面这个命令可以进行预览：<br>   <code>:InstantMarkdownPreview</code>    </p>
<ul>
<li><p>安装新版的<code>node.js</code>  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo add-apt-repository ppa:chris-lea/node.js</div><div class="line">sudo apt-get update</div><div class="line">sudo apt-get install nodejs</div></pre></td></tr></table></figure>
</li>
<li><p>安装instant-markdown-d<br><code>sudo npm -g install instant-markdown-d</code>  </p>
</li>
<li>按照参考链接的步骤配置vim配置文件/usr/share/vim/vimrc  </li>
<li>下载项目链接里的文件，放在~/.vim下,修改配置文件，加入<code>Plugin 文件地址</code>    </li>
<li>在vim里面运行PluginInstall,安装完成  </li>
<li>在vimrc里面设置InstantMarkdown禁止自动启动，而是通过输入命令启动，并更改其启动的命令的名称：  <blockquote>
<p>vimrc中加入<code>command Preview InstantMarkdownPreview</code> 简单更改为<code>Preview</code>  </p>
</blockquote>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux </tag>
            
            <tag> tools </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ipython]]></title>
      <url>/notes/ipython/</url>
      <content type="html"><![CDATA[<h2 id="内省"><a href="#内省" class="headerlink" title="内省"></a>内省</h2><p>1 变量前面或后面加上？可以得到变量的一些通用信息<br>2 在函数或实例对象后面加一个？显示其docstring，加两个？显示源码  </p>
<h2 id="run"><a href="#run" class="headerlink" title="%run"></a>%run</h2><p>在ipython中执行%run *.py与在终端中执行python *.py结果一样  </p>
<h2 id="paste和-cpaste"><a href="#paste和-cpaste" class="headerlink" title="%paste和%cpaste"></a>%paste和%cpaste</h2><p>由于直接粘贴多行代码到ipython的环境中会导致只能运行一行而中断，因此在多行粘贴前，先在ipython中输入%paste或者%cpaste来实现多行复制  </p>
<h2 id="键盘快捷键"><a href="#键盘快捷键" class="headerlink" title="键盘快捷键"></a>键盘快捷键</h2><p>C-b C-f C-a C-e C-k C-u<br>C-p或上箭头 C-n或下箭头<br>C-l  </p>
<h2 id="魔术命令"><a href="#魔术命令" class="headerlink" title="魔术命令"></a>魔术命令</h2><p>%timeit 检查任意语句的执行时间<br>%quickref 显示ipython的快速参考<br>%magic 显示所有魔术命令的详细文档  </p>
<h2 id="matplotlib集成"><a href="#matplotlib集成" class="headerlink" title="matplotlib集成"></a>matplotlib集成</h2><p>使用ipython时加上–pylab, 即<br>ipython –pylab  </p>
]]></content>
      
        <categories>
            
            <category> notes </category>
            
        </categories>
        
        
        <tags>
            
            <tag> tools </tag>
            
            <tag> python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[pip]]></title>
      <url>/notes/pip/</url>
      <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>使用apt-get install pip会导致pip无法升级的问题<br>因此这里使用的是<br><code>sudo easy_install pip</code>  </p>
<h2 id="pip的使用"><a href="#pip的使用" class="headerlink" title="pip的使用"></a>pip的使用</h2><p><a href="http://www.jianshu.com/p/9acc85d0ff16" target="_blank" rel="external">http://www.jianshu.com/p/9acc85d0ff16</a></p>
<h2 id="安装位置"><a href="#安装位置" class="headerlink" title="安装位置"></a>安装位置</h2><p>pip install … 会直接安装在~/.local/lib/python2.7/site-packages这个目录下<br>sudo pip install … 安装在/usr/local/lib/… 这个目录下<br>sudo pip install -t destination-dir package-name  指定安装路径  </p>
]]></content>
      
        <categories>
            
            <category> notes </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux </tag>
            
            <tag> tools </tag>
            
            <tag> python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[docker]]></title>
      <url>/notes/docker/</url>
      <content type="html"><![CDATA[<h2 id="生成和使用镜像"><a href="#生成和使用镜像" class="headerlink" title="生成和使用镜像"></a>生成和使用镜像</h2><p>docker build -t friendlyhello .<br>在当前目录下生成一个名为friendlyhello的镜像，该目录下要有Dockerfile及其所依赖的相关文件</p>
<p>docker images<br>查看本地的镜像仓库  </p>
<p>docker run -p 4000:80 friendlyhello<br>4000是主机端口，80是在Dockerfile里设置的对外开放的容器端口，最终要在主机的localhost:4000访问该服务<br>可以在浏览器中输入localhost:4000访问，也可以在终端中输入 curl <a href="http://localhost:4000" target="_blank" rel="external">http://localhost:4000</a>  </p>
<p>docker run -d -p 4000:80 friendlyhello<br>在background运行docker  </p>
<p>docker ps<br>打印当前正在运行的容器信息  </p>
<p>docker stop 1fa4ab2cf395<br>停止某个容器，后面的字符串是该容器的ID  </p>
<h2 id="分享镜像"><a href="#分享镜像" class="headerlink" title="分享镜像"></a>分享镜像</h2><h3 id="注册账户、仓库与镜像的关系"><a href="#注册账户、仓库与镜像的关系" class="headerlink" title="注册账户、仓库与镜像的关系"></a>注册账户、仓库与镜像的关系</h3><p>A registry is a collection of repositories, and a repository is a collection of images—sort of like a GitHub repository, except the code is already built. An account on a registry can create many repositories. The docker CLI uses Docker’s public registry by default.</p>
<p>docker login<br>登录你的Docker帐号  </p>
<p>docker tag image username/repository:tag<br>这个命令标记你本地的Image所要上传的对应的账户和仓库，tag是可选的，但建议使用，可以通过他来给出镜像的版本号，如果不指定tag，那么它默认为latest</p>
<p>docker push username/repository:tag<br>上传docker镜像,上传之后就可以在Docker Hub看到这个新的镜像。  </p>
<h2 id="从远程仓库pull并运行镜像"><a href="#从远程仓库pull并运行镜像" class="headerlink" title="从远程仓库pull并运行镜像"></a>从远程仓库pull并运行镜像</h2><p>docker run -p 4000:80 username/repository:tag<br>如果docker在本地找不到这个镜像，那么他就会从远程把这个镜像pull到本地。  </p>
<h2 id="nvidia-docker"><a href="#nvidia-docker" class="headerlink" title="nvidia-docker"></a>nvidia-docker</h2><p><code>nvidia-docker run -it -p hostPort:containerPort TensorFlowGPUImage</code> 在jupyter上运行tensorflow，这里的containerPort是8888<br><code>nvidia-docker run -it TensorFlowGPUImage bash</code> 可以在终端上运行tensorflow  </p>
<p><code>-v host_folder:container_floder</code> 使得本地的文件在jupyter中可见<br><code>-p 8888:8888 -p 6006:6006</code> 前一个端口是jupyter的端口，后一个端口是tensorboard的端口  </p>
<p>—————–我是分割线——————</p>
<h2 id="在服务中使用docker"><a href="#在服务中使用docker" class="headerlink" title="在服务中使用docker"></a>在服务中使用docker</h2><h3 id="什么是服务？"><a href="#什么是服务？" class="headerlink" title="什么是服务？"></a>什么是服务？</h3><p>在分布式应用中，app的不同部分称为服务。比如说前端，后台，他们接管一个应用的不同服务。一个服务只需要跑一个镜像，然而他还要规范通信端口，容器应该跑多少部分等。  </p>
<p>docker-compose.yml<br>定义Docker容器在产品中怎么做？  </p>
]]></content>
      
        <categories>
            
            <category> notes </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux </tag>
            
            <tag> Deep Learning </tag>
            
            <tag> tools </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[tmux]]></title>
      <url>/Linux/tmux/</url>
      <content type="html"><![CDATA[<h2 id="设置tmux参数"><a href="#设置tmux参数" class="headerlink" title="设置tmux参数"></a>设置tmux参数</h2><p>一般在.tmux.conf中，如果没有这个文件，使用<br><code>tmux show -g | cat &gt; ~/.tmux.conf</code><br>可以在这个文件中配置tmux前缀，默认是Ctrl+b  </p>
<h2 id="快捷键参考"><a href="#快捷键参考" class="headerlink" title="快捷键参考"></a>快捷键参考</h2><p>按下 Ctrl-b 后的快捷键如下:  </p>
<h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><ul>
<li>? 获取帮助信息  <h3 id="会话管理"><a href="#会话管理" class="headerlink" title="会话管理"></a>会话管理</h3></li>
<li>s 列出所有会话  </li>
<li>$ 重命名当前的会话  </li>
<li>d 断开当前的会话  <h3 id="窗口管理"><a href="#窗口管理" class="headerlink" title="窗口管理"></a>窗口管理</h3></li>
<li>c 创建一个新窗口  </li>
<li>, 重命名当前窗口  </li>
<li>w 列出所有窗口  </li>
<li>% 水平分割窗口  </li>
<li>“ 竖直分割窗口  </li>
<li>n 选择下一个窗口  </li>
<li>p 选择上一个窗口  </li>
<li>0~9 选择0~9对应的窗口  <h3 id="窗格管理"><a href="#窗格管理" class="headerlink" title="窗格管理"></a>窗格管理</h3></li>
<li>% 创建一个水平窗格  </li>
<li>“ 创建一个竖直窗格</li>
<li>o 在窗格间切换  </li>
<li>} 与下一个窗格交换位置  </li>
<li>{ 与上一个窗格交换位置  </li>
<li>! 在新窗口中显示当前窗格  </li>
<li>x 关闭当前窗格  </li>
<li>按住Ctrl+x, 再使用方向键可以微调当前窗口的边界  <h2 id="设置前缀"><a href="#设置前缀" class="headerlink" title="设置前缀"></a>设置前缀</h2>修改~/.tmux.conf文件，输入:<br>set -g prefix C-a<br>unbind C-b  </li>
</ul>
<p>然后在tmux中，输入C+b : 进入命令模式，输入:<br>source-file ~/.tmux.conf<br>也可以在.tmux.conf中用r去bind这个命令，这样每次只要输入r就可以了  </p>
<p>参考链接:<br><a href="http://mingxinglai.com/cn/2012/09/tmux/" target="_blank" rel="external">http://mingxinglai.com/cn/2012/09/tmux/</a><br><a href="http://www.hamvocke.com/blog/a-guide-to-customizing-your-tmux-conf/" target="_blank" rel="external">http://www.hamvocke.com/blog/a-guide-to-customizing-your-tmux-conf/</a></p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> tools </tag>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[opencv]]></title>
      <url>/Deep-Learning/opencv/</url>
      <content type="html"><![CDATA[<h2 id="安装opencv"><a href="#安装opencv" class="headerlink" title="安装opencv"></a>安装opencv</h2><p>1 解压，mkdir release , cd release<br>2 cmake -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/local/opencv/2.4.9 -D CUDA_GENERATION=Kepler ..<br>3 make -j8<br>4 sudo make install  </p>
<ul>
<li>中间要修改graphcuts文件，并且拷贝ippcv文件到相应位置，因为下不下来。。  </li>
</ul>
<h2 id="同时装多个版本的opencv"><a href="#同时装多个版本的opencv" class="headerlink" title="同时装多个版本的opencv"></a>同时装多个版本的opencv</h2><p>将opencv的不同版本装在如下位置，如/usr/local/opencv/2.4.9和/usr/local/opencv/3.1.0<br>编译opencv2.4.9之后，在其指定的目标文件下会有一个python文件夹，里面包含了一个cv.so文件，将这个文件放在主机python库的dist-package文件夹底下即可,opencv3也是同样的道理。<br>    但是为了使得多版本并存，这里我想在dist-package中分别添加cv249和cv310这两个软链接，分别链接到这两个cv2.so文件上，这样，我们在使用时可以通过import cv249来导入2.4.9版本的opencv。但是事实上不能这么做，因为python会去寻找init<name>这个函数，但是更改名字之后就找不到了。。。。所以还是通过版本控制pkg-config试试吧～  </name></p>
<ul>
<li>不要使用apt-get install python-opencv，这会让Opencv的版本不可控         </li>
</ul>
<h3 id="pkg-config"><a href="#pkg-config" class="headerlink" title="pkg-config"></a>pkg-config</h3><p>pkg-config –modversion opencv 查看当前opencv的版本号  </p>
<p>再将下面两行命令输入到~/.bashrc中，来控制当前版本:<br>export PKG_CONFIG_PATH=/usr/local/opencv/2.4.8/lib/pkgconfig<br>export LD_LIBRARY_PATH=/usr/local/opencv/2.4.8/lib/</p>
]]></content>
      
        <categories>
            
            <category> Deep Learning </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux </tag>
            
            <tag> libs </tag>
            
            <tag> computer vision </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Theano]]></title>
      <url>/Deep-Learning/theano/</url>
      <content type="html"><![CDATA[<h2 id="使用GPU"><a href="#使用GPU" class="headerlink" title="使用GPU"></a>使用GPU</h2><p>theano需要手工设定使用GPU，方法如下:<br><code>vim ~/.theanorc</code></p>
<p>add these content<br>[global]<br>device=gpu<br>floatX=float32</p>
]]></content>
      
        <categories>
            
            <category> Deep Learning </category>
            
        </categories>
        
        
        <tags>
            
            <tag> libs </tag>
            
            <tag> Deep Learning </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[linux常用语法]]></title>
      <url>/Linux/linux/</url>
      <content type="html"><![CDATA[<h2 id="find"><a href="#find" class="headerlink" title="find"></a>find</h2><p>查找目录：find /（查找范围） -name ‘查找关键字’ -type d<br>查找文件：find /（查找范围） -name 查找关键字 -print  </p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python]]></title>
      <url>/notes/python/</url>
      <content type="html"><![CDATA[<h2 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h2><ul>
<li><p>十六进制与八进制<br>0xAF<br>010<br>000010</p>
</li>
<li><p>获取用户输入<br><code>input(&quot;x:&quot;)</code> 输入必须是符合python表达式的输入，如是字符串则要带引号<br><code>raw_input(&quot;x:&quot;)</code> 将所有的输入当作原始数据，放入字符串中      </p>
</li>
<li><p>函数<br><code>2**3</code> equal to <code>pow(2,3)</code><br> <code>round(1.0/2.0)</code> 四舍五入  </p>
</li>
<li><p>模块<br> <code>import math</code><br>math.floar(32.9)<br> <code>from math import floar</code><br> floor(32.9)  </p>
</li>
<li><p>cmath和复数<br>cmath用来进行复数运算<br><code>import cmath</code><br><code>cmath.sqrt(-1)</code>  </p>
<p>python本身提供了对复数的支持，可以直接计算<br><code>(-3+j) * (9 + 4j)</code>  </p>
</li>
<li><p><strong>future</strong><br>这个模块包含了未来会成为标准python组成部分的新特性<br><code>import __future__</code>      </p>
</li>
<li><p>让脚本向普通程序一样运行<br>在python脚本的首行中加入：<br><code>#! /usr/bin/python</code><br>并给予脚本运行权限，这样在终端中直接输入：<br><code>./hello.py</code>即可，而无需明确调用python  </p>
</li>
<li><p>注释<br><code>#</code><br><code>&#39;&#39;&#39;</code> </p>
</li>
<li><p>类型准换成字符串<br>str() 转化成适合人类理解的字符串<br>repr() 或者 反引号 转化成符合python表达式的字符串<br>python3 已经不支持反引号进行类型转换准换了</p>
</li>
<li><p>长字符串、原始字符串和Unicode<br><code>&#39;&#39;&#39;长字符串&#39;&#39;&#39;</code> 用三个’代替一个’确保字符串可以跨行书写<br>普通字符串也可以跨行，不过要在每行行末加转义字符\<br><code>r&#39;原始字符串&#39;</code> 原始字符串中不将\当作转义字符，注意，字符串最后不能是\，如要使用则需要再加一个\作为转义<br><code>u&#39;Unicode&#39;</code> python的字符串是用8位的ASCII码储存的，但如果要使用16位的Unicode码，则可以使用这种形式的字符串  </p>
</li>
</ul>
<h2 id="列表和元组"><a href="#列表和元组" class="headerlink" title="列表和元组"></a>列表和元组</h2><ul>
<li>序列<br>python包含6中内建序列，本章主要讨论两种最基本的序列:列表和元组，其他内建序列类型有字符串，Unicode字符串，buffer对象和xrange对象。</li>
</ul>
<ul>
<li><p>索引<br><code>a[0:3]</code><br><code>a[:3]</code><br><code>a[3:0:-1]</code> 最后一个1是步长,步长为负表示从右向左提取元素  </p>
</li>
<li><p>序列相加<br>用<code>+</code>将相同类型的序列相加，可以连接到一起，如：<br><code>[1, 2, 3] + [4, 5]</code><br><code>&#39;Hello, &#39; + &#39;World!&#39;</code>  </p>
</li>
<li><p>乘法<br><code>&#39;a&#39;*2</code> 结果是 <code>&#39;aa&#39;</code><br><code>[&#39;a&#39;] * 2</code> 结果是<code>[&#39;a&#39;, &#39;a&#39;]</code>[None] * 10` 初始化一个长度为10的空列表  </p>
</li>
<li><p>长度、最小值、最大值<br><code>len() max() min()</code>  </p>
</li>
</ul>
<ul>
<li><p>列表<br>1、赋值<br><code>name[3:] = list(&#39;a&#39;)</code><br><code>name[1:1] = [1, 2, 3]</code> 在不替换任何原有元素的基础上，在1这个位置加入新元素<br><code>y = x</code> 实质上y将和x指向同一个序列，x改变的同时，y也改变，并没有生成一个新的列表y<br><code>y = x[:]</code> 将x赋值给了新的列表y    </p>
<p>2、删除<br><code>del name[3:]</code><br><code>name[3:] = []</code>  </p>
<p>3、方法<br>方法是一个与某些对象有紧密联系的函数，对象可能是列表，数字，也可能是字符串或其他类型的对象。<br>注意区别于某些以对象作为运算对象的函数，他们可能会返回某些值，而使用方法只对对象进行操作，他们有时候并不返回值，而只对对象进行处理。  </p>
<ul>
<li>append</li>
<li>count<br><code>name.count(&#39;a&#39;)</code> 统计a在列表name中出现的次数  </li>
<li>extend<br><code>a.extend(b)</code> 相当于:<br><code>a = a + b</code> 由于新生成了列表a+b，因此这种方法比extend效率低  </li>
<li>index<br>name.index(‘a’) 找出a在name中的第一个匹配项的索引位置  </li>
<li>insert<br>name.insert(3, ‘agq’) 在索引为3的位置出插入agq这个字符串  </li>
<li>pop<br><code>pop()</code> 移除列表最后一个元素，并返回，实现栈操作<br><code>pop(1)</code> 移除列表第二个元素，并返回    </li>
<li>remove<br><code>name.remove(&#39;a&#39;)</code> 移除name中与a匹配的一个匹配项  </li>
<li>reverse<br><code>name.reverse()</code> 将列表反转存放  </li>
<li>sort<br>x.sort() 对x进行排序，但是sort方法返回的是空值，不要直接将它赋值给别人  </li>
<li>reversed函数和sorted函数<br><code>y = sorted(x)</code> 将x排序后的值赋值给y，x本身不改变排列状态<br><code>y = reversed(x)</code> 同上  </li>
<li>高级排序<br>可以自定义一个compare(x,y)函数，当x&gt;y时返回正数，x&lt;y时返回负数，相等时返回0。通常，可以使用内建函数cmp来作为compare函数。再将这个函数送给sort,即可定制排序啦:<br><code>x.sort(cmp)</code><br>sort还有另外连个参数key和reverse:<br><code>x.sort(key=len)</code> 使用len作为键函数，则会根据元素的长度排序  </li>
</ul>
</li>
<li><p>元组<br><code>(1,)</code> 生成一个只有一个元素的元组，注意必须要有括号和逗号…  </p>
<ul>
<li>tuple函数<br><code>tuple(name)</code> 将序列转换为元组  </li>
<li>操作–基本与列表一致  </li>
<li>意义<br>1、可以在映射中当键使用，而列表不行<br>2、元组是大量内建函数和方法的返回值，因此必须要会处理元组  </li>
</ul>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> notes </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[注意事项]]></title>
      <url>/Server/attention/</url>
      <content type="html"><![CDATA[<div class="message"><br>为了服务器的正常运行，请大家留意一下以下注意事项。<br></div>

<h2 id="使用规则"><a href="#使用规则" class="headerlink" title="使用规则"></a>使用规则</h2><ul>
<li>文件存放路径<ul>
<li>数据集请放在/data目录下，如果需要在这个目录底下存放数据，请联系我</li>
<li>各种软件、库的安装，请放在/tools底下，如若需要使用这个目录，同样请跟我联系</li>
<li>服务器的主目录空间有限，请尽量避免在主目录底下放数据，如若需要存放大量数据，请联系我，我会在/data目录下，建立一个供你个人使用的目录，以存储数据</li>
</ul>
</li>
<li>网络访问<ul>
<li>服务器的静态ip地址已在slack上周知诸位，请勿外传</li>
<li>现在网络可以仅通过校园网访问，这是不计外网流量的。同时，服务器通过无线网卡连接外网，大家可以通过服务器上网，但是，这是有流量限制的，因此，请诸位除科研用途外，尽量不要使用服务器的外网，请谅解！</li>
</ul>
</li>
</ul>
<h2 id="特别注意"><a href="#特别注意" class="headerlink" title="特别注意"></a>特别注意</h2><ul>
<li><strong>请不要轻易关机或者重启，如有特别需要，请周知大家！</strong></li>
</ul>
]]></content>
      
        <categories>
            
            <category> Server </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[服务器使用指南]]></title>
      <url>/Server/guideline/</url>
      <content type="html"><![CDATA[<div class="message"><br>考虑到服务器的安全问题，下文中，服务器的ip地址用ip_address表示<br></div>

<p>为了方便大家使用，下面总结了一些服务器提供的服务，供大家作为参考。</p>
<h2 id="ssh服务"><a href="#ssh服务" class="headerlink" title="ssh服务"></a>ssh服务</h2><p>ssh服务为用户提供远程登录的服务。我们可以使用ssh登录我们的服务器。 </p>
<ul>
<li><p><strong>Windows</strong><br>在Windows中，大家可以使用putty来进行ssh服务。<br>在网上，直接搜索安装putty即可。</p>
</li>
<li><p><strong>Linux</strong><br>首先打开终端，在终端中输入:<br><code>ssh username@ip_address</code><br>然后在终端中输入该帐号对应的密码即可。</p>
</li>
</ul>
<h2 id="FTP服务"><a href="#FTP服务" class="headerlink" title="FTP服务"></a>FTP服务</h2><p>FTP服务为我们提供了远程文件传输服务。<br>建议大家通过Filezilla使用ssh服务，它除了可以提供ftp服务外，还可以提供SFTP、FTPS、FTPES等服务，实在相当好用。<br>Filezilla同时拥有Windows和Linux版本。Filezilla的安装比较简单，请大家自行安装，谢谢！</p>
<blockquote>
<p>具体操作方法，请参考<a href="http://www.cnblogs.com/yiyi-xuechen/p/3566965.html" target="_blank" rel="external">putty和Filezilla的相关操作</a></p>
</blockquote>
<h2 id="远程桌面"><a href="#远程桌面" class="headerlink" title="远程桌面"></a>远程桌面</h2><p>由于某些同学需要使用服务器的桌面，因此，我安装了x2go来提供远程桌面服务。但是，使用远程桌面会占据一部分服务器/home或/temp下的空间，这部分空间并不充足，同时，使用远程桌面还会占用一些带宽，因此，<strong>如无必要，请勿使用</strong>。下面，我给大家提供x2go的使用方法。</p>
<ul>
<li>安装<br>Windows或Mac OS X请在<a href="http://wiki.x2go.org/doku.php/start" target="_blank" rel="external">这个网站</a>下载安装。<br>Linux直接在终端输入:<br><code>sudo apt-get install x2goserver</code>  </li>
<li>使用方法  <ul>
<li>打开x2go，点击左上方的编辑按钮<br><img src="!--￼0--&gt;/images/x2go1.png" alt="png"></li>
<li>点击New Session，创建一个新的连接<br><img src="!--￼1--&gt;/images/x2go2.png" alt="png"></li>
<li>按下图方式配置，Session Name可以自己定义，注意Session Type选择xfce<br><img src="!--￼2--&gt;/images/x2go3.png" alt="png"></li>
<li>点击ok后，进入这个session，输入用户名和密码，进入系统<br><img src="!--￼3--&gt;/images/x2go4.png" alt="png"></li>
<li>由于现在的默认终端有问题，需要对终端进行重新设置。在桌面终端图标处,点击右键，设置终端属性。<br><img src="!--￼4--&gt;/images/x2go5.png" alt="png"></li>
<li>点击编辑按钮<br><img src="!--￼5--&gt;/images/x2go6.png" alt="png"></li>
<li>编辑command的路径，使其与下图一致<br><img src="!--￼6--&gt;/images/x2go7.png" alt="png"></li>
<li>这样就可以使用这个远程桌面啦！不过终端的环境变量还要重新设置一下，这样就可以正常使用了！<br><img src="!--￼7--&gt;/images/x2go8.png" alt="png"></li>
</ul>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Server </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[服务器配置过程]]></title>
      <url>/Server/config/</url>
      <content type="html"><![CDATA[<div class="message"><br>这个页面主要记录了服务器的配置过程，和一些问题的解决方法，为后期服务器的维护提供参考<br></div>

]]></content>
      
        <categories>
            
            <category> Server </category>
            
        </categories>
        
        
    </entry>
    
  
  
    
    <entry>
      <title><![CDATA[tags]]></title>
      <url>/tags/index.html</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[About Me]]></title>
      <url>/about/index.html</url>
      <content type="html"><![CDATA[<h2 id="Education"><a href="#Education" class="headerlink" title="Education"></a>Education</h2><ul>
<li>Persuing the M.Eng degree in pattern recognition and intelligence processing at Xidian University, now.</li>
<li>B.Eng., July, 2016, Xidian University, Xi’an, China.</li>
</ul>
<h2 id="Projects"><a href="#Projects" class="headerlink" title="Projects"></a>Projects</h2><ul>
<li><a href="https://github.com/ChunhuanLin" target="_blank" rel="external">Github</a></li>
<li><a href="">Kaggle</a></li>
</ul>
<h2 id="Contact"><a href="#Contact" class="headerlink" title="Contact"></a>Contact</h2><p>School of Electronic Engineering,<br>Xidian University,<br>Xi’an, Shaanxi, 710071, P. R. China<br>Email: lch_xdu@163.com</p>
]]></content>
    </entry>
    
  
</search>
